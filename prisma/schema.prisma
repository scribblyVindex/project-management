// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    projects        Project[] @relation(name: "projectMemberAccess")
    projectAdmin    Project[] @relation(name: "projectAdminAccess")
    projectsCreated Project[] @relation("projectsCreated")
    tasksAssigned   Task[]    @relation(name: "tasksAssigned")
    tasksReported   Task[]    @relation(name: "tasksCreated")
    createdAt       DateTime  @default(now())
    updatedAt       DateTime?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Task {
    id          String    @id @unique @default(cuid())
    relativeId  String
    title       String
    description String?
    type        String
    assignee    User?     @relation(name: "tasksAssigned", fields: [assigneeId], references: [id], onDelete: Cascade)
    assigneeId  String?
    creator     User?     @relation(name: "tasksCreated", fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId   String?
    priority    String    @default("medium")
    dueDate     DateTime?
    tags        String[]
    status      String    @default("todo")
    project     Project   @relation(name: "taskOfProject", fields: [projectId], references: [id], onDelete: Cascade)
    projectId   String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime?
}

model Project {
    id          String    @id @default(cuid())
    name        String
    description String?
    admins      User[]    @relation(name: "projectAdminAccess")
    members     User[]    @relation(name: "projectMemberAccess")
    prefix      String
    tags        String[]
    status      String[]
    priority    String[]
    invitations String[]
    taskTypes   String[]
    createdBy   User      @relation(name: "projectsCreated", fields: [creatorId], references: id)
    creatorId   String
    tasks       Task[]    @relation(name: "taskOfProject")
    createdAt   DateTime  @default(now())
    updatedAt   DateTime?

    @@unique([id, prefix], name: "projectIdentifier")
}
